AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM App for triggering a Lambda function from SNS topic.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: The environment name

Conditions:
  isDev: !Equals [!Ref environment, dev]

Resources:
  ReceiveMessageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: receive-sns-message-function
      CodeUri: receive_message/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SNSMessageTable
      Environment:
        Variables:
          LOCAL_STACK_ENDPOINT: !If [isDev, "http://host.docker.internal:4566", ""]
          DB_TABLE: !Ref SNSMessageTable
          SNS_TOPIC_ARN: !Ref SNS
          SNS_TOPIC_NAME: !GetAtt SNS.TopicName
  SNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: LambdaLocalStackSNSTopic
      TopicName: LambdaLocalStackSNSTopic
      FifoTopic: false

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt ReceiveMessageFunction.Arn
      TopicArn: !Ref SNS

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref SNS
      FunctionName: !Ref ReceiveMessageFunction

  SNSMessageTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: sns-message-table

Outputs:
  SNSTopicARN:
    Description: "Sns topic ARN"
    Value: !Ref SNS
